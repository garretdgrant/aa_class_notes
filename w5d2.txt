Introduction to SQL - lets get mentally prepared
Learning Goals
    Understand why we need databases
    Know what a Relational database management system is 
    be able to access data in a database and perform basic operations

How do websites store data?
    Databases!

    there are different models of databses 
        they differ in how they store data and how that data can therefore be accessed
    were going to use a relational database model. Relational refers to the use of tables to store
    and organize data   
        each table is referred to as a relation, as it is a collection of related data entries

    Two parts to storing and accessing data:
        1 DataBase management system
            an application that stores data at scale and can be queried for data
        2 The Querying Language
            The language we use to interact with the database management system to create our database, insert data,
            and query it for data

    RDBMS - Relational Database management system
        An application that stores data at scale and organizes the data in tables

        we will be using
            postgreSQL 
                well be using this for the next two days and for most projects
            SQLite
                thursdays projects

Relational Data:

SQL: The way we communicate with our database
    Structured Query Language
    DSL - Domain Specific Language

What can SQL do?
    can create new databases
    create new tables in a database
    insert records in a database
    update records in a database
    delete records in a database
    can retrieve data from a database

Column Types
    Every column must have a declared data type, some common ones:
    varchar
    boolean
    integer
    float
    date
    many, many more
    see postgreSQL.org docs for more information on data data Types

    postgresql shell commands
        psql
        CREATE DATABASE lecture;
        psql lecture
        \d - list tables
        \d table - show schema for table
        \? to list meta commands
        end queries with a ;

Basics of SQL queries
    SELECT: choose which columns to extract data from
    FROM: specifies the relation you're getting data from
    WHERE/WHERE NOT: filters the data according to a logical expression
        =, >=, <=, >, <, (<>/!=)--> both of these operators mean not equal
        IN, BETWEEN, LIKE, (%)
        AND, OR
Example:
    SELECT
    *               select everything from possessions table. 
    FROM
    possessions
    WHERE
    type = 'tech';   ---> only possesions with tech as the type

Common Filters and commands
    ORDER BY: sorts results based on a specific column
        ASC or DESC
        ASC is default
    LIMIT: how many rows you want in the results
    OFFSET: how many rows you want to skip from the top
    DISTINCT: De-duplicates data in a result (like Array.uniq)
        SELECT DISTINCT name, type
        SELECT COUNT (DISTINCT name)

Null:
    Comparisons to NULL do not work in SQL
    NULL represents an unkown value
        Null is not a value, it is a non-value
    Use IS NULL and IS NOT NULL to check for NULL values. 

LIKE vs ILIKE
Like: Case sensitive
ILIKE: not case sensitive

Aggregate Functions
    Aggregate functions combine data from a colum into a single value
    You should always use an alias with aggregate functions to make clearer results
    COUNT, SUM, AVG, MIN/MAX,  and more. 

    SELECT
        AVG(cost) AS avg_cost
    FROM
        pssessions;

GROUP BY
    groups rows with matching values for given colum
        collapses each group of rows into a single rows
    any column we selent must be in our group BY
    aggregate functions in select will apply to the individual groups, not the groups as a whole.

WHERE VS HAVING
    Having works like where, butt.....
    where gets evaluated before group BY
    having gets evaluated after group BY

    since where is pre group by, group entries cannot be filtered by where
    having is same as where clause but applied on grouped entries
    aggregate functions are not allowed in where. you must use aggregate in having

    Order of SQL operations
    FROM
    join
    where - does not allow aggregate functions 
    group by
    having 
    select
    order by
    offset/LIMIT

Can I use the result of query in a different query
    what is the most common possession and which ones cost more than $1000

    use a subquery

Most commonly used in the where clause
    WHERE IN Subquerey
    WHERE NOT IN Subquerey
When to use
    youll want to use a subquery if your query follows the logic of "Get me this data A, as long as it is 
    in this dataset B"

We can join tables together
why and When
    lots of data across many tables
    subqueries use less memory than joins
    subqueries use more cpu than joins
    in practice, this can differ between sql engines. 
    so we like joins over subqueries

joins
    combine data from multiple tables into one relation using a join
    types of relationships between tables
        one to many
            each ta has one pod leader, and each pod leader has many tas



    3 most common types of joins
        INNER join (DEFAULT)
            returns only rows from table1 and table2 that match each other
            A row can be deleted if there is not a match. Lecture example Adele got deleted 

        LEFT OUTER JOIN - LEFT JOIN
         returns all rows in t1 whether or not the match in t2, not supported by all engines
         will not delete adele even though none of her songs are in t2

         RIGHT JOIN
          includes everything from t2

         FULL OUTER JOIN
            includes everything from both tables. 
    