What is rails?
    Rails Definition: A server-side mvc web-application framework
    framework - "bundle of stuff"
MVC
    model, views, controllers

Active Record - an ORM framework (The M in MVC)
    Allows us to:
    - Represent models and their data
    - Represent associations between data
    - Validate models before they get persisted to the database
    - perform database operations (CRUD) in OOP fashion 
    
Migrations
Models
Assosciations 

Migrations
    - Incremental and reversible chages made to a database schema, allowing it to evolve over time.
    - Not just a Rails thing - ubiquitous to app frameworks that work with relational DBs.
    - Rails allows you to use an easy Ruby DSL(domain-specific language) to descripe changes to 
        your tables, rather than write raw SQL

    garretg@GPad:~/App_Academy/aa_class_notes/w5d4$ rails new DogeBird -d=postgresql --minimal -T -G
    sudo service postgresql start - start postgresql
     rails db:create - create databases
     rails generate migration CreateUsers - create table file
     rails db:migrate - after finishing migration creates a schema.rb file
     rails db:migrate:status - look at the status of the Migrations
     rails g migration AddAgeAndFaveCoin -- make additions to tables (migrations)

     common commands
        rails g migration Create{TableName}
        rails g migration Add{ColumnName}To{TableName}
        rails g migration Remove{ColumnName}From{TableName}
        rails g migration AddIndexTo{TableName}

     common migration methods
        create_table
        add_column
        change_column
        remove_index

    Changing existing migrations
        you cant just edit the migration and run the migration again
        instead you have two options
        1 write a new migration (much preferred)
        2 rollback:
            roll back
            edit migration
            re migrate



    Models
        The central component of the MVC pattern
        A class that represents and directly manages the data, logic and rules for a table
            typicall contains: validations, asssociations, and custom methods
            inherits from ApplicationRecord (which inherits from ActiveRecord)
        There is a one-to-one correspondence between a model and a table
        An instance of this class represents a row sin our table 

Database Constraints vs Model Validations
    Model validations are best used to provide error messages to users interacting with your app
    its highly likely that:
        you will interact with the database at some point outside of Rails
        you will make a mistake in your code that causes invalid data
    Database constraints are the last line of defense for data-integrity
    Writing constraints is work, but they will save you a lot of pain

Common Validations
    validates :some_column, presence: true (plural, prewritten validations )
        similar to null: false
    validates :other_column, uniqueness: true
        similar to unique: true
    Custom Validations

Asssociations
    connections between tow ActiveRecord models
    make common operations simpler and easier in your code. 
    we dont have to write anymore sql joins

example 
    class Strike < ApplicationRecord
        belongs_to :student,  --individual strike belongs to individual student
        primary_key: :id, -- in the student table
        foreign_key: :student_id, --in the current table
        class_name: :Student --other table (model)
    end

Strategy
    start with belongs_to
    write corresponding has_many

ActiveRecord commands called on classes User.find() etc
find() - finds a single record on id

first
    finds the first record ordered by primary_key
last
    finds the last record ordered by primary_key
find_by()
    look up the first matching record based on any cooumn value

rails db:reset --drop tables, reruns migrations, reseeds. 

where/where.not allows you to specify exact value to match, range of values, or multiple values
    to find
Ways to pass in conditions:
    User.where(email: "email.com")
    sanitize
        User.where("email = (?)", "email.com")
        User.where("age >=  ? And age < ?", 20, 99)

User.select(:favorite_coin).group(:favorite_coin)
User.where(favorite_coin: ["Bitcoin", "babyElon"]).order(username: :desc)

Chaining ActiveRecord methods - these methods are chainable!!!!!!!!!!!!!!!!
group() returns distinct records grouped by the passed
having() filters grouped records that match statement, must have group
order() returns roecords ordered by passed attribute
offset() offsets the ordered records by the number passed
limit() limits the returned records to the numbek passed

Calculations/Aggregations
count()
sum()
average()
minimum()
maxximum()

Querying with associations
    ActiveRecord allows us to call associations
    Returns a relation  object that is cached inside our object model
 

 Joins 
    uses associations to join tables
    joins()/left_outer_joins()
        takes association names as paramaters
    Returns ActiveRecord::Relation

Using select with joins 
    when using #joins, you must include the joined tables columns in select in order
    to have access to columns

Pluck
    Accepts column names as Args
    returns an array of values of the secified columns
    Triggers an immediate Query
    other scopes must be constructed earlier
    cannot be chained with any further scopes
        must be at the end of the Query
    Returns an Array of specified arg example 
    [6] pry(main)> Chirp.joins(:likes).group(:id).pluck(:body) -- will return an array of bodies

N+1 Queries -- these are bad, do not do these
    When you execute a query and then you try to run queries for each member of the collection.
        posts = user1.posts
        res = {}
        posts.each do |post|
            res[post] = post.comments.length
        end

        this makes 1 quere fo user1.posts, for each post, you make N queries to find the comments length for
        each post, This is na N+1 Query.

Includes and Eager Loading for N+1 Queries
    .includes takes association names as parameters
    allows us to chain onto our queries and pre-fetch associations
        generates a 2nd query to pre-fectch associated data
    Eager loading is pre-fetching associated objects using as few queries as possible and
    caching the results.

    posts = user1.posts.includes(:comments)
    res = {}
    posts.each do |post|
        res[post] = post.comments.length
    end

Joins for N+1 Queries
    Creates a single query fetching all data into a single table
    ideally used when using aggregation on the associated data e.g. count

    posts = user1
        .posts
        .select("posts.*,count(*) as comments_count")
        .joins(:comments)
        .group("posts.id")

    posts.map do |post|
        [post.title, post.comments_count]
    end
