Refrences and Scopes

ruby variables hold references (otherwise known as pointers)
to objects stored in memory

- = assignment operator
- assigns the variable pointersdoesnt change or mutate the object stored in memory

Mutability: state can be modified after it is created
Immutable: state cannot be modified after it is created

mutable: Sting, Array, Hash
immutable: Integer, Float, Symbol

Ref Diagram and Refrences
Part 1:
For mutable objects, we can get back a different object id
example: "hello".object_id == "hello".object_id
=> false

Part 2: a =[1,2,3] a is a pointer to an array object, 
which is full of pointers to the integers 1,2,3
In other words, each element of the array is a pointer itself
a[0].object_id == 1.object_id
=> true

a.push(2) mutates the array, but does not reassign a
so, in otherwords the object_id of a does not change
with push

a << is the same as a.push
.concat mutates, while += reassigns
we can multi shovel a << 5 << 6 WHAT!!!!!!1

cool way to copy array, but have diff object_id
a = [1,2,3]
b = a + [] (this also does a shallow dup)
b = a.dup (only does top level array level) (shallow dup vs deep dup)
now changes to either array will not change the other. 


scope:
 inside block we have access to all variables outside of block,
 but when you declare variable inside of block, it is only
 available inside the block. 

 scope gates: we lose all access to variables outside, also outside has no access to these vars.
    1: Method Defs
    2: Classe Defs
    2: module Defs

    Inside method def, variables are paramaters
    When invoking method, variables are arguments. 

    ** exponent operator


Array/Hash Defaults:
    Making Array of Arrays
     - naive approach Array.new(3,[]) Non-Unique subarrays
     - correct way: Array.new(3){[]} || Arary.new(3) {Array.new} - This code runs once per index

     example demo: Takeaway, be very careful when creating Arrays of arrays or hashes with arrays.
        Array.new(3,[])
     [38] pry(main)> grid.each {|el| p el.object_id}
            680
            680
            680
            => [[], [], []]
            [39] pry(main)> 

            Array.new(3){[]}
            grid.each {|el| p el.object_id}
            700
            720
            740
            => [[], [], []]

            [1] pry(main)> h = Hash.new([])
            => {}
            [2] pry(main)> h[5]
            => []
            [3] pry(main)> h[4].object_id == h[5].object_id
            => true
            [4] pry(main)> 


            h = Hash.new {[]} ---> Be careful, this is not correct.
            Only do this when default values are mutable
            if immutable we can just say h = Hash.new(0)
            [5] pry(main)> h = Hash.new {|h,k| h[k]=[]} #this creates a hash where every key has a value of a new array
            => {}
            [6] pry(main)> h[1] << 1
            => [1]
            [7] pry(main)> h[2]
            => []
            [8] pry(main)> 








